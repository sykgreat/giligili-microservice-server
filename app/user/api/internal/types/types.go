// Code generated by goctl. DO NOT EDIT.
package types

import (
	"github.com/zeromicro/go-zero/rest/httpx"
	"net/http"
)

type User struct {
	Id         int64  `json:"id"`
	Email      string `json:"email"`
	Username   string `json:"username"`
	Avatar     string `json:"avatar"`
	SpaceCover string `json:"space_cover"`
	Gender     string `json:"gender"`
	Birthday   string `json:"birthday"`
	Sign       string `json:"sign"`
	ClientIp   string `json:"client_ip"`
	CreateTime int64  `json:"create_time"`
	UpdateTime int64  `json:"update_time"`
	DeleteTime int64  `json:"delete_time"`
}

type Token struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

type BaseRequest struct {
}

type BaseResponse struct {
}

type RegisterRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Captcha  string `json:"captcha"`
}

type LoginByCaptchaRequest struct {
	Email   string `json:"email"`
	Captcha string `json:"captcha"`
}

type LoginByPasswordRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse struct {
	Data Token `json:"data"`
}

type ChangePasswordByCaptchaRequest struct {
	Email    string `json:"email"`
	Captcha  string `json:"captcha"`
	Password string `json:"password"`
}

type ChangePasswordByPasswordRequest struct {
	Email       string `json:"email"`
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
}

type GetUserInfoRequest struct {
	UserId int64 `json:"user_id"`
}

type GetUserInfoResponse struct {
	User User `json:"data"`
}

type ChangeDetailRequest struct {
	Username   string `json:"username"`
	Avatar     string `json:"avatar"`
	SpaceCover string `json:"space_cover"`
	Gender     string `json:"gender"`
	Birthday   string `json:"birthday"`
	Sign       string `json:"sign"`
	ClientIp   string `json:"client_ip"`
}

type Body struct {
	Code int         `json:"code"`
	Msg  string      `json:"msg"`
	Data interface{} `json:"data,omitempty"`
}

func Response(w http.ResponseWriter, resp interface{}, code int, msg string) {
	httpx.OkJson(w, Body{
		code,
		msg,
		resp,
	})
}
